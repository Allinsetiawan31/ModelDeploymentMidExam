# -*- coding: utf-8 -*-
"""Nomor 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CKGMHbxhFEvOPgrHroh-6jWvJn-5Pdyw
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import xgboost as xgb
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
from sklearn.impute import SimpleImputer

class Training:
  def __init__ (self, data, target_column):
    self.data = data
    self.target_column = target_column
    self.X_train = None
    self.X_test = None
    self.y_train = None
    self.y_test = None
    self.RF_Model = None
    self.xgb_Model = None

  def preprocess(self):
    X = self.data.drop(self.target_column, axis = 1)
    y = self.data[self.target_column]

    categorical_cols = X.select_dtypes(include=['object']).columns
    X_encoded = pd.get_dummies(X, columns=categorical_cols, drop_first=True)

    self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(X_encoded, y, test_size = 0.2, random_state=42)

    self.imputer = SimpleImputer(strategy='mean')
    self.X_train = pd.DataFrame(self.imputer.fit_transform(self.X_train), columns=self.X_train.columns)
    self.X_test = pd.DataFrame(self.imputer.transform(self.X_test), columns=self.X_test.columns)

  def train(self):
    self.RF_Model = RandomForestClassifier()
    self.RF_Model.fit(self.X_train, self.y_train)

    self.xgb_Model = xgb.XGBClassifier()
    self.xgb_Model.fit(self.X_train, self.y_train)

  def evaluate_model(self):
    RF_predict = self.RF_Model.predict(self.X_test)
    RF_report = classification_report(self.y_test, RF_predict)
    xgb_predict = self.xgb_Model.predict(self.X_test)
    xgb_report = classification_report(self.y_test, xgb_predict)

    return RF_report, xgb_report

  def best_model(self):
    RF_acc = accuracy_score(self.y_test, self.RF_Model.predict(self.X_test))
    xgb_acc = accuracy_score(self.y_test, self.xgb_Model.predict(self.X_test))

    if RF_acc > xgb_acc:
        return self.RF_Model, "Random Forest"
    else:
        return self.xgb_Model, "XGBoost"

data = pd.read_csv('data_B.csv')

coba = Training(data, target_column='churn')
coba.preprocess()
coba.train()

RF_report, xgb_report = coba.evaluate_model()
best_model, best_model_name = coba.best_model()

print("Best Model:", best_model_name)